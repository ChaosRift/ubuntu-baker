name: Build All Image in Parallel
run-name: >
  Build by @${{ github.actor }} [${{
    (github.event_name == 'repository_dispatch' && github.event.client_payload.trigger_source) ||
    github.event_name
  }}] on ${{
    (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) ||
    (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) ||
    'ubuntu-latest'
  }}

# This workflow builds Ubuntu Rockchip images using a smart matrix system that
# deduplicates artifact builds. The matrix generator analyzes board configurations
# and only builds the unique rootfs, kernel, and u-boot artifacts needed.
#
# Boards to build can be specified:
# 1. Default: handy-hpd5kx,orangepi-5-plus,orangepi-5b,radxa-rock-5b
# 2. Workflow input: Set "boards_to_build" when running manually
# 3. Environment variable: Edit BOARDS_TO_BUILD below
# 4. Repository dispatch: Pass boards_to_build in client_payload

on:
  repository_dispatch:
    types: [event-bake-all]

  workflow_dispatch:
    inputs:
      runner:
        description: 'Specify the runner (e.g., ubuntu-latest, windows-latest, self-hosted-runner).'
        required: false
        type: choice
        default: 'ubuntu-latest'
        options:
          - ubuntu-latest
          - ubuntu-24.04
          - ubuntu-22.04
          - github-linux64-ubuntu-latest-8core  # Large GitHub-hosted runner
          - github-arm64-ubuntu-24.04-8core  # ARM64 self-hosted runner

      boards_to_build:
        description: 'Comma-separated list of boards to build (leave empty to use default)'
        required: false
        type: string
        default: ''

      baker_artifact_retention_days:
        description: 'Retention days for baker artifacts'
        required: false
        type: number
        default: 90

      image_artifact_retention_days:
        description: 'Retention days for artifacts downloaded from bakers and the final image'
        required: false
        type: number
        default: 90

      release_tag:
        description: 'Release tag for the image'
        required: false
        type: string
        default: ''

      registry_type:
        description: 'Container registry to use'
        required: false
        default: 'ghcr'
        type: choice
        options:
          - 'ghcr'
          - 'acr'
          - 'none'

      registry_server:
        description: 'Registry server URL (auto-detected if empty)'
        required: false
        type: string

      registry_namespace:
        description: 'Registry namespace (auto-detected if empty)'
        required: false
        type: string

      registry_username:
        description: 'Registry username (auto-detected if empty)'
        required: false
        type: string

env:
  RECIPE_REP: ${{ github.event.repository.name || 'diverger/ubuntu-rockchip' }}
  RECIPE_REF: ${{ github.event.client_payload.build_ref || 'diverger' }}
  RECIPE_DIR: "."

  # Define the boards to build (change this list as needed)
  BOARDS_TO_BUILD: ${{ github.event.inputs.boards_to_build || github.event.client_payload.boards_to_build || 'handy-hpd5kx-aim7' }}
  EFFECTIVE_TRIGGER_SOURCE: ${{ github.event.client_payload.trigger_source || github.event_name }}
  EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS: ${{ github.event.inputs.baker_artifact_retention_days || github.event.client_payload.baker_artifact_retention_days || 1 }}
  EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS: ${{ github.event.inputs.image_artifact_retention_days || github.event.client_payload.image_artifact_retention_days || 90 }}
  EFFECTIVE_RELEASE_TAG: ${{ github.event.inputs.release_tag || github.event.client_payload.release_tag || '' }}
  EFFECTIVE_RUNNER: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
  REGISTRY_TYPE: ${{ github.event.inputs.registry_type || github.event.client_payload.registry_type || 'ghcr' }}
  REGISTRY_SERVER: ${{ github.event.inputs.registry_server || github.event.client_payload.registry_server || 'ghcr.io' }}
  REGISTRY_NAMESPACE: ${{ github.event.inputs.registry_namespace || github.event.client_payload.registry_namespace || github.repository }}
  REGISTRY_USERNAME: ${{ github.event.inputs.registry_username || github.event.client_payload.registry_username || github.actor }}

jobs:
  matrix:
    if: ${{ github.actor == 'diverger' }}
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Generate Build Matrices
    outputs:
      rootfs_matrix: ${{ steps.matrices.outputs.rootfs_matrix }}
      kernel_matrix: ${{ steps.matrices.outputs.kernel_matrix }}
      uboot_matrix: ${{ steps.matrices.outputs.uboot_matrix }}
      image_matrix: ${{ steps.matrices.outputs.image_matrix }}
    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Generate build matrices
        id: matrices
        env:
          BOARDS_TO_BUILD: ${{ env.BOARDS_TO_BUILD }}
          RECIPE_DIR: ${{ env.RECIPE_DIR }}
        run: |
          cd "$RECIPE_DIR"
          chmod +x scripts/ci/generate-build-matrix.sh

          # Always detect OS version from runner
          OS_VERSION="$(lsb_release -is | tr '[:upper:]' '[:lower:]')-$(lsb_release -rs)"

          echo "🎯 Building for boards: $BOARDS_TO_BUILD"
          echo "Using OS version: $OS_VERSION"

          echo "Generating rootfs matrix..."
          rootfs_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type rootfs --output json --os-version "$OS_VERSION" --registry-url "$REGISTRY_SERVER" --namespace "$REGISTRY_NAMESPACE")
          echo "rootfs_matrix=$rootfs_matrix" >> $GITHUB_OUTPUT
          rootfs_count=$(echo "$rootfs_matrix" | jq '.include | length')
          echo "rootfs_count=$rootfs_count" >> $GITHUB_OUTPUT
          echo "Rootfs matrix: $rootfs_matrix"

          echo "Generating kernel matrix..."
          kernel_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type kernel --output json --os-version "$OS_VERSION" --registry-url "$REGISTRY_SERVER" --namespace "$REGISTRY_NAMESPACE")
          echo "kernel_matrix=$kernel_matrix" >> $GITHUB_OUTPUT
          kernel_count=$(echo "$kernel_matrix" | jq '.include | length')
          echo "kernel_count=$kernel_count" >> $GITHUB_OUTPUT
          echo "Kernel matrix: $kernel_matrix"

          echo "Generating uboot matrix..."
          uboot_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type uboot --output json --os-version "$OS_VERSION" --registry-url "$REGISTRY_SERVER" --namespace "$REGISTRY_NAMESPACE")
          echo "uboot_matrix=$uboot_matrix" >> $GITHUB_OUTPUT
          uboot_count=$(echo "$uboot_matrix" | jq '.include | length')
          echo "uboot_count=$uboot_count" >> $GITHUB_OUTPUT
          echo "Uboot matrix: $uboot_matrix"

          echo "Generating image matrix..."
          image_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type image --output json --os-version "$OS_VERSION" --registry-url "$REGISTRY_SERVER" --namespace "$REGISTRY_NAMESPACE")
          echo "image_matrix=$image_matrix" >> $GITHUB_OUTPUT
          image_count=$(echo "$image_matrix" | jq '.include | length')
          echo "image_count=$image_count" >> $GITHUB_OUTPUT
          echo "Image matrix: $image_matrix"

      - name: Show matrix summary
        run: |
          echo "### 📊 Build Matrix Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Matrix Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Rootfs | ${{ steps.matrices.outputs.rootfs_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kernel | ${{ steps.matrices.outputs.kernel_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| U-Boot | ${{ steps.matrices.outputs.uboot_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Images | ${{ steps.matrices.outputs.image_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 U-Boot Deduplication Details" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.uboot_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Rootfs Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.rootfs_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### 🧬 Kernel Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.kernel_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### 🖼️ Image Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.image_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  rootfs:
    if: ${{ github.actor == 'diverger' }}
    needs: matrix
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build rootfs
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.rootfs_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/rootfs-baker"
        with:
          suite: ${{ matrix.suite }}
          flavor: ${{ matrix.flavor }}
          variant: ${{ matrix.variant }}
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_check: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_url: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_SERVERID || 'ghcr.io' }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          registry_username: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_USERNAME || github.actor }}
          registry_token: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  kernel:
    if: ${{ github.actor == 'diverger' }}
    needs: matrix
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build kernel
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.kernel_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/kernel-baker"
        with:
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_check: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_url: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_SERVERID || 'ghcr.io' }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          registry_username: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_USERNAME || github.actor }}
          registry_token: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  uboot:
    if: ${{ github.actor == 'diverger' }}
    needs: matrix
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build u-boot
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.uboot_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/uboot-baker"
        with:
          board: ${{ matrix.representative_board }}
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_check: ${{ env.REGISTRY_TYPE != 'none' }}
          registry_url: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_SERVERID || 'ghcr.io' }}
          registry_namespace: ${{ env.REGISTRY_NAMESPACE }}
          registry_username: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_USERNAME || github.actor }}
          registry_token: ${{ env.REGISTRY_TYPE == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  image:
    if: ${{ github.actor == 'diverger' && success() }}
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    needs: [matrix, rootfs, kernel, uboot]
    name: Build Ubuntu Rockchip Image
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.image_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: image_build_step
        uses: ./.github/actions/image-baker
        with:
          action_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          board: ${{ matrix.board }}
          suite: ${{ matrix.suite }}
          flavor: ${{ matrix.flavor }}
          rootfs_artifact_name: ${{ matrix.rootfs_artifact_name || '' }}
          kernel_artifact_name: ${{ matrix.kernel_artifact_name || '' }}
          uboot_artifact_name: ${{ matrix.uboot_artifact_name || '' }}
          release_tag: ${{ env.EFFECTIVE_RELEASE_TAG }}
          artifact_retention_days: ${{ env.EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS }}
          oss_key_id: ${{ secrets.OSS_ACCESS_KEY }}
          oss_key_secret: ${{ secrets.OSS_SECRET_KEY }}

      - name: Calculate expire date
        if: ${{ success() && steps.image_build_step.outcome == 'success' }}
        id: expire
        run: |
          expire_date=$(date -u -d "+${{ env.EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS }} days" +"%Y-%m-%d")
          echo "Expire date: $expire_date"
          echo "expire_date=$expire_date" >> $GITHUB_OUTPUT
          echo "📅 Artifact Expire Date: $expire_date" >> $GITHUB_STEP_SUMMARY
